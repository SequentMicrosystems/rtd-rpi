#ifndef RTD_H_
#define RTD_H_

#include <stdint.h>


#define RETRY_TIMES	10
#define CALIBRATION_KEY 0xaa
#define RESET_CALIBRATION_KEY	0x55 
#define WDT_RESET_SIGNATURE 	0xCA
#define WDT_MAX_OFF_INTERVAL_S 4147200 //48 days
#define WDT_RESET_COUNT_SIGNATURE	0xBE

enum
{
	RTD_VAL1_ADD = 0,
	RTD_VAL2_ADD = RTD_VAL1_ADD + 4,
	RTD_VAL3_ADD = RTD_VAL2_ADD + 4,
	RTD_VAL4_ADD = RTD_VAL3_ADD + 4,
	RTD_VAL5_ADD = RTD_VAL4_ADD + 4,
	RTD_VAL6_ADD = RTD_VAL5_ADD + 4,
	RTD_VAL7_ADD = RTD_VAL6_ADD + 4,
	RTD_VAL8_ADD = RTD_VAL7_ADD + 4,
	DIAG_TEMPERATURE_MEM_ADD = RTD_VAL8_ADD + 4,
	DIAG_5V_MEM_ADD,
	I2C_MEM_WDT_RESET_ADD = DIAG_5V_MEM_ADD + 2,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD + 4,
	REVISION_HW_MAJOR_MEM_ADD  = I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD + 4,
	REVISION_HW_MINOR_MEM_ADD,
	REVISION_MAJOR_MEM_ADD,
	REVISION_MINOR_MEM_ADD,

	RTD_RES1_ADD,
	RTD_RES2_ADD = RTD_RES1_ADD + 4,
	RTD_RES3_ADD = RTD_RES2_ADD + 4,
	RTD_RES4_ADD = RTD_RES3_ADD + 4,
	RTD_RES5_ADD = RTD_RES4_ADD + 4,
	RTD_RES6_ADD = RTD_RES5_ADD + 4,
	RTD_RES7_ADD = RTD_RES6_ADD + 4,
	RTD_RES8_ADD = RTD_RES7_ADD + 4,
	RTD_REINIT_COUNT = RTD_RES8_ADD + 4,
	RTD_SPS1_ADD = RTD_REINIT_COUNT + 4,
	RTD_SPS2_ADD = RTD_SPS1_ADD + 2,
	RTD_CARD_TYPE = RTD_SPS2_ADD+2,
	RTD_RASP_VOLT,
	I2C_MODBUS_SETINGS_ADD = RTD_RASP_VOLT + 2, //5 bytes
	RTD_LEDS_FUNC = I2C_MODBUS_SETINGS_ADD + 5, //2 bytes
	RTD_LED_THRESHOLD1 = RTD_LEDS_FUNC + 2,
	RTD_LED_THRESHOLD2 = RTD_LED_THRESHOLD1 + 2,
	RTD_LED_THRESHOLD3 = RTD_LED_THRESHOLD2 + 2,
	RTD_LED_THRESHOLD4 = RTD_LED_THRESHOLD3 + 2,
	RTD_LED_THRESHOLD5 = RTD_LED_THRESHOLD4 + 2,
	RTD_LED_THRESHOLD6 = RTD_LED_THRESHOLD5 + 2,
	RTD_LED_THRESHOLD7 = RTD_LED_THRESHOLD6 + 2,
	RTD_LED_THRESHOLD8 = RTD_LED_THRESHOLD7 + 2,
	I2C_CALIB_RES = RTD_LED_THRESHOLD8 + 2,//float
	I2C_CALIB_CH = I2C_CALIB_RES + 4,//u8
	I2C_SENSORS_TYPE,
	I2C_MEM_ADS_SAMPLE_SWITCH,//u16
	I2C_MEM_PT1000 = I2C_MEM_ADS_SAMPLE_SWITCH + 2, //u8

	SLAVE_BUFF_SIZE = 0xff
};

#define CHANNEL_NR_MIN		1
#define RTD_CH_NR_MAX		8

#define ERROR	-1
#define OK		0
#define FAIL	-1
#define ARG_ERR -2
#define ARG_CNT_ERR -3


#define SLAVE_OWN_ADDRESS_BASE 0x40

typedef uint8_t u8;
typedef int8_t s8;
typedef uint16_t u16;
typedef int16_t s16;
typedef uint32_t u32;
typedef int32_t s32;

typedef enum
{
	OFF = 0,
	ON,
	STATE_COUNT
} OutStateEnumType;

typedef struct
{
	const char *name;
	const int namePos;
	int (*pFunc)(int, char**);
	const char *help;
	const char *usage1;
	const char *usage2;
	const char *example;
} CliCmdType;

//const CliCmdType *gCmdArray[];

int doBoardInit(int stack);
int rtdHwTypeGet(int dev, int* hw);

//LED's
extern const CliCmdType CMD_READ_LED_MODE;
extern const CliCmdType CMD_WRITE_LED_MODE;
extern const CliCmdType CMD_READ_LED_TH;
extern const CliCmdType CMD_WRITE_LED_TH;

//RS485
extern const CliCmdType CMD_RS485_READ;
extern const CliCmdType CMD_RS485_WRITE;

//Watchdog
extern const CliCmdType CMD_WDT_RELOAD;
extern const CliCmdType CMD_WDT_SET_PERIOD;
extern const CliCmdType CMD_WDT_GET_PERIOD;
extern const CliCmdType CMD_WDT_SET_INIT_PERIOD;
extern const CliCmdType CMD_WDT_GET_INIT_PERIOD;
extern const CliCmdType CMD_WDT_SET_OFF_PERIOD;
extern const CliCmdType CMD_WDT_GET_OFF_PERIOD;
extern const CliCmdType CMD_WDT_GET_RESETS_COUNT;
extern const CliCmdType CMD_WDT_CLR_RESETS_COUNT;

#endif //RELAY8_H_
